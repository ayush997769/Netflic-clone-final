{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { API_KEY, TMDB_BASE_URL } from \"../utils/constants\";\nconst initialState = {\n  movies: [],\n  genresLoaded: false,\n  genres: []\n};\nexport const getGenres = createAsyncThunk(\"netflix/genres\", async () => {\n  const {\n    data: {\n      genres\n    }\n  } = await axios.get(\"https://api.themoviedb.org/3/genre/movie/list?api_key=3d39d6bfe362592e6aa293f01fbcf9b9\");\n  return genres;\n});\n\nconst createArrayFromRawData = (array, moviesArray, genres) => {\n  array.forEach(movie => {\n    const movieGenres = [];\n    movie.genre_ids.forEach(genre => {\n      const name = genres.find(_ref => {\n        let {\n          id\n        } = _ref;\n        return id === genre;\n      });\n      if (name) movieGenres.push(name.name);\n    });\n    if (movie.backdrop_path) moviesArray.push({\n      id: movie.id,\n      name: movie !== null && movie !== void 0 && movie.original_name ? movie.original_name : movie.original_title,\n      image: movie.backdrop_path,\n      genres: movieGenres.slice(0, 3)\n    });\n  });\n};\n\nconst getRawData = async function (api, genres) {\n  let paging = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const moviesArray = [];\n\n  for (let i = 1; moviesArray.length < 60 && i < 10; i++) {\n    const {\n      data: {\n        results\n      }\n    } = await axios.get(`${api}${paging ? `&page=${i}` : \"\"}`);\n    createArrayFromRawData(results, moviesArray, genres);\n  }\n\n  return moviesArray;\n};\n\nexport const fetchDataByGenre = createAsyncThunk(\"netflix/genre\", async (_ref2, thunkAPI) => {\n  let {\n    genre,\n    type\n  } = _ref2;\n  const {\n    netflix: {\n      genres\n    }\n  } = thunkAPI.getState();\n  return getRawData(`https://api.themoviedb.org/3/discover/${type}?api_key=3d39d6bfe362592e6aa293f01fbcf9b9&with_genres=${genre}`, genres);\n});\nexport const fetchMovies = createAsyncThunk(\"netflix/trending\", async (_ref3, thunkAPI) => {\n  let {\n    type\n  } = _ref3;\n  const {\n    netflix: {\n      genres\n    }\n  } = thunkAPI.getState();\n  return getRawData(`${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`, genres, true);\n});\nexport const getUsersLikedMovies = createAsyncThunk(\"netflix/getLiked\", async email => {\n  const {\n    data: {\n      movies\n    }\n  } = await axios.get(`http://localhost:5000/api/user/liked/${email}`);\n  return movies;\n});\nexport const removeMovieFromLiked = createAsyncThunk(\"netflix/deleteLiked\", async _ref4 => {\n  let {\n    movieId,\n    email\n  } = _ref4;\n  const {\n    data: {\n      movies\n    }\n  } = await axios.put(\"http://localhost:5000/api/user/remove\", {\n    email,\n    movieId\n  });\n  return movies;\n});\nconst NetflixSlice = createSlice({\n  name: \"Netflix\",\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(getGenres.fulfilled, (state, action) => {\n      state.genres = action.payload;\n      state.genresLoaded = true;\n    });\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n    builder.addCase(fetchDataByGenre.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n    builder.addCase(getUsersLikedMovies.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n    builder.addCase(removeMovieFromLiked.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n  }\n});\nexport const store = configureStore({\n  reducer: {\n    netflix: NetflixSlice.reducer\n  }\n});\nexport const {\n  setGenres,\n  setMovies\n} = NetflixSlice.actions;","map":{"version":3,"sources":["D:/Netflix/netflix-ui/src/store/index.js"],"names":["configureStore","createAsyncThunk","createSlice","axios","API_KEY","TMDB_BASE_URL","initialState","movies","genresLoaded","genres","getGenres","data","get","createArrayFromRawData","array","moviesArray","forEach","movie","movieGenres","genre_ids","genre","name","find","id","push","backdrop_path","original_name","original_title","image","slice","getRawData","api","paging","i","length","results","fetchDataByGenre","thunkAPI","type","netflix","getState","fetchMovies","getUsersLikedMovies","email","removeMovieFromLiked","movieId","put","NetflixSlice","extraReducers","builder","addCase","fulfilled","state","action","payload","store","reducer","setGenres","setMovies","actions"],"mappings":"AAAA,SACEA,cADF,EAEEC,gBAFF,EAGEC,WAHF,QAIO,kBAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,YAAY,EAAE,KAFK;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAArB;AAMA,OAAO,MAAMC,SAAS,GAAGT,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACtE,QAAM;AACJU,IAAAA,IAAI,EAAE;AAAEF,MAAAA;AAAF;AADF,MAEF,MAAMN,KAAK,CAACS,GAAN,CACR,wFADQ,CAFV;AAKA,SAAOH,MAAP;AACD,CAPwC,CAAlC;;AASP,MAAMI,sBAAsB,GAAG,CAACC,KAAD,EAAQC,WAAR,EAAqBN,MAArB,KAAgC;AAC7DK,EAAAA,KAAK,CAACE,OAAN,CAAeC,KAAD,IAAW;AACvB,UAAMC,WAAW,GAAG,EAApB;AACAD,IAAAA,KAAK,CAACE,SAAN,CAAgBH,OAAhB,CAAyBI,KAAD,IAAW;AACjC,YAAMC,IAAI,GAAGZ,MAAM,CAACa,IAAP,CAAY;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,eAAYA,EAAE,KAAKH,KAAnB;AAAA,OAAZ,CAAb;AACA,UAAIC,IAAJ,EAAUH,WAAW,CAACM,IAAZ,CAAiBH,IAAI,CAACA,IAAtB;AACX,KAHD;AAIA,QAAIJ,KAAK,CAACQ,aAAV,EACEV,WAAW,CAACS,IAAZ,CAAiB;AACfD,MAAAA,EAAE,EAAEN,KAAK,CAACM,EADK;AAEfF,MAAAA,IAAI,EAAEJ,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAES,aAAP,GAAuBT,KAAK,CAACS,aAA7B,GAA6CT,KAAK,CAACU,cAF1C;AAGfC,MAAAA,KAAK,EAAEX,KAAK,CAACQ,aAHE;AAIfhB,MAAAA,MAAM,EAAES,WAAW,CAACW,KAAZ,CAAkB,CAAlB,EAAqB,CAArB;AAJO,KAAjB;AAMH,GAbD;AAcD,CAfD;;AAiBA,MAAMC,UAAU,GAAG,gBAAOC,GAAP,EAAYtB,MAAZ,EAAuC;AAAA,MAAnBuB,MAAmB,uEAAV,KAAU;AACxD,QAAMjB,WAAW,GAAG,EAApB;;AACA,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBlB,WAAW,CAACmB,MAAZ,GAAqB,EAArB,IAA2BD,CAAC,GAAG,EAA/C,EAAmDA,CAAC,EAApD,EAAwD;AACtD,UAAM;AACJtB,MAAAA,IAAI,EAAE;AAAEwB,QAAAA;AAAF;AADF,QAEF,MAAMhC,KAAK,CAACS,GAAN,CAAW,GAAEmB,GAAI,GAAEC,MAAM,GAAI,SAAQC,CAAE,EAAd,GAAkB,EAAG,EAA9C,CAFV;AAGApB,IAAAA,sBAAsB,CAACsB,OAAD,EAAUpB,WAAV,EAAuBN,MAAvB,CAAtB;AACD;;AACD,SAAOM,WAAP;AACD,CATD;;AAWA,OAAO,MAAMqB,gBAAgB,GAAGnC,gBAAgB,CAC9C,eAD8C,EAE9C,cAAwBoC,QAAxB,KAAqC;AAAA,MAA9B;AAAEjB,IAAAA,KAAF;AAASkB,IAAAA;AAAT,GAA8B;AACnC,QAAM;AACJC,IAAAA,OAAO,EAAE;AAAE9B,MAAAA;AAAF;AADL,MAEF4B,QAAQ,CAACG,QAAT,EAFJ;AAGA,SAAOV,UAAU,CACd,yCAAwCQ,IAAK,yDAAwDlB,KAAM,EAD7F,EAEfX,MAFe,CAAjB;AAID,CAV6C,CAAzC;AAaP,OAAO,MAAMgC,WAAW,GAAGxC,gBAAgB,CACzC,kBADyC,EAEzC,cAAiBoC,QAAjB,KAA8B;AAAA,MAAvB;AAAEC,IAAAA;AAAF,GAAuB;AAC5B,QAAM;AACJC,IAAAA,OAAO,EAAE;AAAE9B,MAAAA;AAAF;AADL,MAEF4B,QAAQ,CAACG,QAAT,EAFJ;AAGA,SAAOV,UAAU,CACd,GAAEzB,aAAc,aAAYiC,IAAK,iBAAgBlC,OAAQ,EAD3C,EAEfK,MAFe,EAGf,IAHe,CAAjB;AAKD,CAXwC,CAApC;AAcP,OAAO,MAAMiC,mBAAmB,GAAGzC,gBAAgB,CACjD,kBADiD,EAEjD,MAAO0C,KAAP,IAAiB;AACf,QAAM;AACJhC,IAAAA,IAAI,EAAE;AAAEJ,MAAAA;AAAF;AADF,MAEF,MAAMJ,KAAK,CAACS,GAAN,CAAW,wCAAuC+B,KAAM,EAAxD,CAFV;AAGA,SAAOpC,MAAP;AACD,CAPgD,CAA5C;AAUP,OAAO,MAAMqC,oBAAoB,GAAG3C,gBAAgB,CAClD,qBADkD,EAElD,eAA8B;AAAA,MAAvB;AAAE4C,IAAAA,OAAF;AAAWF,IAAAA;AAAX,GAAuB;AAC5B,QAAM;AACJhC,IAAAA,IAAI,EAAE;AAAEJ,MAAAA;AAAF;AADF,MAEF,MAAMJ,KAAK,CAAC2C,GAAN,CAAU,uCAAV,EAAmD;AAC3DH,IAAAA,KAD2D;AAE3DE,IAAAA;AAF2D,GAAnD,CAFV;AAMA,SAAOtC,MAAP;AACD,CAViD,CAA7C;AAaP,MAAMwC,YAAY,GAAG7C,WAAW,CAAC;AAC/BmB,EAAAA,IAAI,EAAE,SADyB;AAE/Bf,EAAAA,YAF+B;AAG/B0C,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBxC,SAAS,CAACyC,SAA1B,EAAqC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtDD,MAAAA,KAAK,CAAC3C,MAAN,GAAe4C,MAAM,CAACC,OAAtB;AACAF,MAAAA,KAAK,CAAC5C,YAAN,GAAqB,IAArB;AACD,KAHD;AAIAyC,IAAAA,OAAO,CAACC,OAAR,CAAgBT,WAAW,CAACU,SAA5B,EAAuC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxDD,MAAAA,KAAK,CAAC7C,MAAN,GAAe8C,MAAM,CAACC,OAAtB;AACD,KAFD;AAGAL,IAAAA,OAAO,CAACC,OAAR,CAAgBd,gBAAgB,CAACe,SAAjC,EAA4C,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7DD,MAAAA,KAAK,CAAC7C,MAAN,GAAe8C,MAAM,CAACC,OAAtB;AACD,KAFD;AAGAL,IAAAA,OAAO,CAACC,OAAR,CAAgBR,mBAAmB,CAACS,SAApC,EAA+C,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChED,MAAAA,KAAK,CAAC7C,MAAN,GAAe8C,MAAM,CAACC,OAAtB;AACD,KAFD;AAGAL,IAAAA,OAAO,CAACC,OAAR,CAAgBN,oBAAoB,CAACO,SAArC,EAAgD,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjED,MAAAA,KAAK,CAAC7C,MAAN,GAAe8C,MAAM,CAACC,OAAtB;AACD,KAFD;AAGD;AApB8B,CAAD,CAAhC;AAuBA,OAAO,MAAMC,KAAK,GAAGvD,cAAc,CAAC;AAClCwD,EAAAA,OAAO,EAAE;AACPjB,IAAAA,OAAO,EAAEQ,YAAY,CAACS;AADf;AADyB,CAAD,CAA5B;AAMP,OAAO,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAA2BX,YAAY,CAACY,OAA9C","sourcesContent":["import {\r\n  configureStore,\r\n  createAsyncThunk,\r\n  createSlice,\r\n} from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { API_KEY, TMDB_BASE_URL } from \"../utils/constants\";\r\n\r\nconst initialState = {\r\n  movies: [],\r\n  genresLoaded: false,\r\n  genres: [],\r\n};\r\n\r\nexport const getGenres = createAsyncThunk(\"netflix/genres\", async () => {\r\n  const {\r\n    data: { genres },\r\n  } = await axios.get(\r\n    \"https://api.themoviedb.org/3/genre/movie/list?api_key=3d39d6bfe362592e6aa293f01fbcf9b9\"\r\n  );\r\n  return genres;\r\n});\r\n\r\nconst createArrayFromRawData = (array, moviesArray, genres) => {\r\n  array.forEach((movie) => {\r\n    const movieGenres = [];\r\n    movie.genre_ids.forEach((genre) => {\r\n      const name = genres.find(({ id }) => id === genre);\r\n      if (name) movieGenres.push(name.name);\r\n    });\r\n    if (movie.backdrop_path)\r\n      moviesArray.push({\r\n        id: movie.id,\r\n        name: movie?.original_name ? movie.original_name : movie.original_title,\r\n        image: movie.backdrop_path,\r\n        genres: movieGenres.slice(0, 3),\r\n      });\r\n  });\r\n};\r\n\r\nconst getRawData = async (api, genres, paging = false) => {\r\n  const moviesArray = [];\r\n  for (let i = 1; moviesArray.length < 60 && i < 10; i++) {\r\n    const {\r\n      data: { results },\r\n    } = await axios.get(`${api}${paging ? `&page=${i}` : \"\"}`);\r\n    createArrayFromRawData(results, moviesArray, genres);\r\n  }\r\n  return moviesArray;\r\n};\r\n\r\nexport const fetchDataByGenre = createAsyncThunk(\r\n  \"netflix/genre\",\r\n  async ({ genre, type }, thunkAPI) => {\r\n    const {\r\n      netflix: { genres },\r\n    } = thunkAPI.getState();\r\n    return getRawData(\r\n      `https://api.themoviedb.org/3/discover/${type}?api_key=3d39d6bfe362592e6aa293f01fbcf9b9&with_genres=${genre}`,\r\n      genres\r\n    );\r\n  }\r\n);\r\n\r\nexport const fetchMovies = createAsyncThunk(\r\n  \"netflix/trending\",\r\n  async ({ type }, thunkAPI) => {\r\n    const {\r\n      netflix: { genres },\r\n    } = thunkAPI.getState();\r\n    return getRawData(\r\n      `${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`,\r\n      genres,\r\n      true\r\n    );\r\n  }\r\n);\r\n\r\nexport const getUsersLikedMovies = createAsyncThunk(\r\n  \"netflix/getLiked\",\r\n  async (email) => {\r\n    const {\r\n      data: { movies },\r\n    } = await axios.get(`http://localhost:5000/api/user/liked/${email}`);\r\n    return movies;\r\n  }\r\n);\r\n\r\nexport const removeMovieFromLiked = createAsyncThunk(\r\n  \"netflix/deleteLiked\",\r\n  async ({ movieId, email }) => {\r\n    const {\r\n      data: { movies },\r\n    } = await axios.put(\"http://localhost:5000/api/user/remove\", {\r\n      email,\r\n      movieId,\r\n    });\r\n    return movies;\r\n  }\r\n);\r\n\r\nconst NetflixSlice = createSlice({\r\n  name: \"Netflix\",\r\n  initialState,\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getGenres.fulfilled, (state, action) => {\r\n      state.genres = action.payload;\r\n      state.genresLoaded = true;\r\n    });\r\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\r\n      state.movies = action.payload;\r\n    });\r\n    builder.addCase(fetchDataByGenre.fulfilled, (state, action) => {\r\n      state.movies = action.payload;\r\n    });\r\n    builder.addCase(getUsersLikedMovies.fulfilled, (state, action) => {\r\n      state.movies = action.payload;\r\n    });\r\n    builder.addCase(removeMovieFromLiked.fulfilled, (state, action) => {\r\n      state.movies = action.payload;\r\n    });\r\n  },\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    netflix: NetflixSlice.reducer,\r\n  },\r\n});\r\n\r\nexport const { setGenres, setMovies } = NetflixSlice.actions;\r\n"]},"metadata":{},"sourceType":"module"}